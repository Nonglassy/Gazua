#데이터 불러오기
import pyupbit
from pyupbit.quotation_api import get_tickers



ETH_price = pyupbit.get_current_price("KRW-ETH")


df_ETH = pyupbit.get_ohlcv("KRW-ETH","hour",1581, to = '20220501')
df_ETH = df_ETH.drop("value",axis=1)
print(df_ETH)

#결측치 확인
df_ETH.isnull().sum()

#minmax 정규화
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler()
df_ETH = df_ETH.drop('volume',axis=1)
df_ETH = sc.fit_transform(df_ETH)

#훈련데이터, 시험데이터 나누기
import pandas as pd
df_ETH = pd.DataFrame(df_ETH)

df_train = df_ETH.iloc[:1200,:5].values
df_test = df_ETH.iloc[:381,:5].values

#학습에 사용할 수 있도록 input 데이터 조정하기
import numpy as np

x_train = []
y_train = []
y_train_stacked = []

for i in range(3,1199):
    x_train.append(df_train[i-3:i,:])
    y_train.append(df_train[i:i+1,3])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train,(1196,3,4))


x_test = []
y_test = []

for i in range(3,380):
    x_test.append(df_test[i-3:i,:])
    y_test.append(df_test[i:i+1,3])

x_test, y_test = np.array(x_test), np.array(y_test)
x_test = np.reshape(x_test,(377,3,4))

#LSTM 모델
from keras.models import Sequential
from keras.layers import Dense, SimpleRNN, GRU, LSTM
from keras.optimizers import RMSprop, Nadam, Adam

lstm_model = Sequential()

lstm_model.add(LSTM(units = 50,
                    return_sequences = True,
                    input_shape = (3,4),
                    activation = 'tanh'))

lstm_model.add(LSTM(units = 50,
                    activation = 'tanh'))

lstm_model.add(Dense(units = 1))

lstm_model.compile(optimizer = Nadam(lr=0.01),
                  loss = 'Huber')

lstm_model.fit(x_train,y_train, epochs = 100, batch_size = 32, verbose = 0)


#예측값
lstm_prediction = lstm_model.predict(x_test)

lstm_prediction.shape

#예측값과 실제값 비교하기
import matplotlib.pyplot as plt

x1 = []
for i in range(377):
    x1.append(i)

    
x2 = []
for i in range(377):
    x2.append(i)  
        
    
plt.plot(x1,lstm_prediction,label = 'prediction')
plt.plot(x2, y_test,label = 'true price')
plt.legend()
plt.show()
